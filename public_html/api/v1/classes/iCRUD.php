<?php

/* This is the interface to allow a Mapper to have Create, Remove,
 * Update, and Delete (CRUD) capability on a class.
 * 
 * With the table name, array of fields, and an ID (primary key),
 * the Mapper class can do CRUD operations on single resources.
 * 
 * Stuff like queries though, that has to be specially implemented.
 * 
 * If additional classes are added, they can implement this interface to
 * get some basic functionality (see Badge or Hunt classes).
 */


interface iCRUD
{
	/* Returns a string of the name of the corresponding table in the database. */
	public function getTableName();	
	
	
	/* Returns an associative array of the fields to populate table row */
	public function getFields();	
	
	
	/* Returns the (name, value) pair of the key used to ID the table row (Primary key in database)
	 * as a single-element associative array.
	 * This should be an entry that exists in the array returned from getFields().
	 * The 'name' of the ID should be from a hard-coded list of values that are declared in the class.
	 * The 'value' is user input, and cannot be trusted.  The SQL query is generated by string construction,
	 * but does not use any user input in it's construction.  The statement is prepared first with PDO and then run.
	 * 
	 * However, if 'name' is compromised somehow, SQL injection is possible.
	 * 
	 * Use the Hunt or Badge classes as a template to add additional classes.
	 */
	public function getPrimaryKey();
	
	
	/* Returns the UID as a string for the owner of the instance of the class */
	public function getUID();

}


?>
